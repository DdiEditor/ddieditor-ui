<?xml version="1.0"?>
<project name="ddieditor-ui" default="compile" basedir=".">

	<!-- can't use build.properties due to PDE using same file!
	workaround rename to other name, not done yet. No reason so far
	property file="${basedir}/build.properties" /-->

	<!-- properties -->
	<property file="${basedir}/../lib-java/lib.properties" />
	<property environment="env" />

	<!-- directories -->
	<property name="src.dir" value="${basedir}/src" />
	<property name="src.resources.dir" value="${src.dir}/resources" />
	<property name="testsrc.dir" value="${basedir}/testsource" />
	<property name="lib.dir" value="${basedir}/../lib-java/" />
	<property name="build.classes.dir" value="${basedir}/build" />
	<property name="build.dir.jdoc" value="${build.classes.dir}/javadoc" />
	<property name="junit.results.dir" value="${build.classes.dir}/junit-reports" />

	<!-- javac arguments -->
	<property name="javac.debug" value="on" />
	<property name="javac.deprecation" value="off" />
	<property name="javac.optimize" value="on" />
	<property name="javac.depend" value="off" />
	<property name="javac.verbose" value="off" />
	<property name="build.compiler.pedantic" value="no" />

	<!-- java args -->
	<property name="java.heap.init" value="128" />
	<property name="java.heap.max" value="512" />

	<!-- project class path -->
	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="junit/${version.junit}/*.jar" />
			<include name="log4j/${version.log4j}/*.jar" />
			<include name="xmlbeans/${version.xmlbeans}/*.jar" />
			<include name="saxon/${version.saxon}/*jar" />
			<include name="xerecs/${version.xerecs}/*.jar" />
			<include name="joda-time/${version.joda-time}/*.jar" />
			<!-- missing build paths especialy to swt, how to set up this ~ $ECLIPSE_HOME perhaps -->
		</fileset>
		<fileset dir="../org.ddialliance.ddi_3_0.xml.xmlbeans/xmllib">
			<include name="*20080428*.jar" />
		</fileset>
		<pathelement path="${build.classes.dir}" />
		<pathelement path="${testsrc.dir}" />
		<pathelement location="${src.dir}" />
	</path>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- clean										 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="clean" description="Clean up">
		<delete quiet="true" dir="${build.classes.dir}" />
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- compile			                         -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="compile" description="Compile the code">
		<mkdir dir="${build.classes.dir}" />
		<javac destdir="${build.classes.dir}" classpathref="project.classpath" fork="yes" debug="${javac.debug}" deprecation="${javac.deprecation}" optimize="${javac.optimize}">
			<src path="${src.dir}" />
		</javac>
	</target>

	<target name="resource" description="Setup resources in the build dir">
		<mkdir dir="${build.classes.dir}/logs" />
		<mkdir dir="${build.classes.dir}/resources" />
		<copy todir="${build.classes.dir}/resources" overwrite="yes">
			<fileset dir="${src.resources.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.classes.dir}/resources" overwrite="yes">
			<fileset dir="../ddieditor/source/resources">
				<include name="resource-list.xml" />
				<include name="*.txt" />
				<include name="ddiftp-app.properties" />
			</fileset>
		</copy>
	</target>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- junit test									 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="compile-test" depends="compile, resource" description="Compiles all test code">
		<javac destdir="${build.classes.dir}" classpathref="project.classpath" fork="yes" debug="${javac.debug}" deprecation="${javac.deprecation}" optimize="${javac.optimize}">
			<src path="${testsrc.dir}" />
		</javac>
	</target>

	<target name="test" depends="compile-test, resource" description="Runs all junit tests">
		<mkdir dir="${junit.results.dir}" />

		<delete quiet="true">
			<fileset dir="${junit.results.dir}">
				<include name="*.xml" />
			</fileset>
		</delete>

		<junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="false" dir="${build.classes.dir}">
			<classpath refid="project.classpath" />
			<jvmarg value="-Xms${java.heap.init}m" />
			<jvmarg value="-Xmx${java.heap.max}m" />
			<batchtest todir="${junit.results.dir}">
				<fileset dir="${testsrc.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/*.class" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
		</junit>
	</target>

	<target name="test-report" depends="test" description="Generates JUnit test reports">
		<junitreport todir="${junit.results.dir}">
			<fileset dir="${junit.results.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.results.dir}" />
		</junitreport>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- misc										 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="javadoc" description="Compile javadoc">
		<mkdir dir="${build.dir.jdoc}" />
		<javadoc sourcepath="${src.dir}" destdir="${build.dir.jdoc}" classpathref="project.classpath" splitindex="true" verbose="true">
			<fileset dir="${src.dir}">
				<include name="org/ddiallince/**/*" />
			</fileset>
		</javadoc>
	</target>
</project>
